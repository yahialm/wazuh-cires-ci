name: Wazuh Docker Swarm Deployment

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  validate-config:
    runs-on: self-hosted
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate configuration files
        run: |
          required_files=(
            "config/certs.yml"
            "config/wazuh_cluster/wazuh_manager.conf"
            "config/wazuh_indexer/wazuh.indexer.yml"
            "config/wazuh_indexer/internal_users.yml"
            "config/wazuh_dashboard/opensearch_dashboards.yml"
            "config/wazuh_dashboard/wazuh.yml"
            "wazuh-swarm.yaml"
          )
          
          for file in "${required_files[@]}"; do
            if [[ ! -f "$file" ]]; then
              echo "❌ Required file missing: $file"
              exit 1
            else
              echo "✅ Found: $file"
            fi
          done

  deploy:
    runs-on: self-hosted
    timeout-minutes: 20
    needs: validate-config
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # If runner is ON the swarm manager, deploy directly
      - name: Deploy to Docker Swarm (Local)
        if: ${{ env.DEPLOY_LOCAL == 'true' }}
        run: |
          cd /opt/wazuh
          
          # Copy files locally
          cp -r $GITHUB_WORKSPACE/config/* ./config/
          cp $GITHUB_WORKSPACE/wazuh-swarm.yaml ./
          cp $GITHUB_WORKSPACE/setup-secrets.sh ./
          
          # Generate certificates
          echo "Generating certificates..."
          docker run --rm -v $(pwd)/config:/config --network host wazuh/wazuh-certs-generator:0.0.2
          
          # Setup secrets
          echo "Setting up secrets..."
          chmod +x setup-secrets.sh
          ./setup-secrets.sh
          
          # Deploy stack
          echo "Removing old stack..."
          docker stack rm wazuh || true
          sleep 15
          
          echo "Deploying new stack..."
          docker stack deploy -c wazuh-swarm.yaml wazuh
          
          # Wait for services
          echo "Waiting for services..."
          timeout 300 bash -c 'while [[ "$(docker service ls --filter name=wazuh --format "{{.REPLICAS}}" | grep -c "0/")" -gt 0 ]]; do sleep 10; echo "Still waiting..."; done'
          
          echo "✅ Deployment completed!"
          docker service ls --filter name=wazuh

      # If runner is NOT on swarm manager, deploy via SSH
      - name: Deploy to Docker Swarm (Remote)
        if: ${{ env.DEPLOY_LOCAL != 'true' }}
        run: |
          # Setup SSH (only needed if runner is separate from swarm)
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SWARM_MANAGER_HOST }} >> ~/.ssh/known_hosts
          
          # Copy files to swarm manager
          scp -r config/ ${{ secrets.SWARM_MANAGER_USER }}@${{ secrets.SWARM_MANAGER_HOST }}:/opt/wazuh/
          scp wazuh-swarm.yaml ${{ secrets.SWARM_MANAGER_USER }}@${{ secrets.SWARM_MANAGER_HOST }}:/opt/wazuh/
          scp setup-secrets.sh ${{ secrets.SWARM_MANAGER_USER }}@${{ secrets.SWARM_MANAGER_HOST }}:/opt/wazuh/
          
          # Deploy via SSH
          ssh ${{ secrets.SWARM_MANAGER_USER }}@${{ secrets.SWARM_MANAGER_HOST }} << 'EOF'
          cd /opt/wazuh
          
          # Generate certificates
          docker run --rm -v $(pwd)/config:/config --network host wazuh/wazuh-certs-generator:0.0.2
          
          # Setup secrets
          chmod +x setup-secrets.sh
          ./setup-secrets.sh
          
          # Deploy stack
          docker stack rm wazuh || true
          sleep 15
          docker stack deploy -c wazuh-swarm.yaml wazuh
          
          # Wait for services
          timeout 300 bash -c 'while [[ "$(docker service ls --filter name=wazuh --format "{{.REPLICAS}}" | grep -c "0/")" -gt 0 ]]; do sleep 10; echo "Still waiting..."; done'
          
          echo "✅ Deployment completed!"
          docker service ls --filter name=wazuh
          EOF

  notify:
    runs-on: self-hosted
    needs: [deploy]
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Wazuh deployment successful"
          else
            echo "❌ Wazuh deployment failed"
            exit 1
          fi
