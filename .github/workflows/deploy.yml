name: Wazuh Docker Swarm Deployment

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository }}

jobs:
  validate-config:
    runs-on: self-hosted
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate configuration files
        run: |
          required_files=(
            "config/certs.yml"
            "config/wazuh_cluster/wazuh_manager.conf"
            "config/wazuh_indexer/wazuh.indexer.yml"
            "config/wazuh_indexer/internal_users.yml"
            "config/wazuh_dashboard/opensearch_dashboards.yml"
            "config/wazuh_dashboard/wazuh.yml"
            "wazuh-swarm.yaml"
            "generate-indexer-certs.yml"
          )
          
          for file in "${required_files[@]}"; do
            if [[ ! -f "$file" ]]; then
              echo "❌ Required file missing: $file"
              exit 1
            else
              echo "✅ Found: $file"
            fi
          done
          
          echo "All configuration files present"

  security-scan:
    runs-on: self-hosted
    timeout-minutes: 15
    needs: validate-config
    strategy:
      matrix:
        image:
          - wazuh/wazuh-manager:4.12.0
          - wazuh/wazuh-indexer:4.12.0
          - wazuh/wazuh-dashboard:4.12.0
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Trivy
        run: |
          if ! command -v trivy &> /dev/null; then
            echo "Installing Trivy..."
            sudo apt-get update -y
            sudo apt-get install wget apt-transport-https gnupg lsb-release -y
            wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
            echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
            sudo apt-get update
            sudo apt-get install trivy -y
          else
            echo "Trivy already installed"
          fi

      - name: Create safe filename for image
        run: |
          # Convert image name to safe filename
          SAFE_NAME=$(echo "${{ matrix.image }}" | sed 's/[\/:]/_/g')
          echo "SAFE_IMAGE_NAME=${SAFE_NAME}" >> $GITHUB_ENV

      - name: Run Trivy vulnerability scanner
        run: |
          echo "Scanning ${{ matrix.image }}..."
          trivy image \
            --format sarif \
            --output "trivy-results-${SAFE_IMAGE_NAME}.sarif" \
            --severity CRITICAL,HIGH \
            --timeout 10m \
            --exit-code 1 \
            ${{ matrix.image }}
          
          echo "Security scan passed for ${{ matrix.image }}"

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results-${{ env.SAFE_IMAGE_NAME }}.sarif"

      - name: Display scan summary
        if: always()
        run: |
          echo "Security scan completed for ${{ matrix.image }}"
          if [ -f "trivy-results-${SAFE_IMAGE_NAME}.sarif" ]; then
            echo "Results uploaded to GitHub Security tab"
          else
            echo "No results file generated"
          fi

  deploy:
    runs-on: self-hosted
    timeout-minutes: 20
    needs: [validate-config, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        run: |
          if ! command -v python3 &> /dev/null; then
            sudo apt update
            sudo apt install -y python3 python3-pip
          fi

      - name: Install Ansible
        run: |
          # Install Python pip if not available
          if ! command -v pip3 &> /dev/null; then
            sudo apt update
            sudo apt install -y python3-pip
          fi
          
          # Install Ansible
          pip3 install --user ansible ansible-core
          
          # Add pip user bin to PATH
          export PATH="$HOME/.local/bin:$PATH"
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          
          # Install community.docker collection
          $HOME/.local/bin/ansible-galaxy collection install community.docker

      - name: Configure SSH
        run: |
          # Check if required secrets are set
          if [ -z "${{ secrets.SWARM_MANAGER_HOST }}" ]; then
            echo "❌ SWARM_MANAGER_HOST secret is not set"
            exit 1
          fi
          
          if [ -z "${{ secrets.SWARM_MANAGER_USER }}" ]; then
            echo "❌ SWARM_MANAGER_USER secret is not set"
            exit 1
          fi
          
          if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            echo "❌ SSH_PRIVATE_KEY secret is not set"
            exit 1
          fi
          
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SWARM_MANAGER_HOST }} >> ~/.ssh/known_hosts
          
          echo "✅ SSH configured for ${{ secrets.SWARM_MANAGER_HOST }}"

      - name: Deploy with Ansible
        env:
          ANSIBLE_HOST_KEY_CHECKING: False
        run: |
          cat > inventory.yml << 'EOF'
          all:
            hosts:
              swarm-manager:
                ansible_host: ${{ secrets.SWARM_MANAGER_HOST }}
                ansible_user: ${{ secrets.SWARM_MANAGER_USER }}
                ansible_ssh_private_key_file: ~/.ssh/id_rsa
          EOF
          
          cat > deploy-playbook.yml << 'EOF'
          ---
          - name: Deploy Wazuh to Docker Swarm
            hosts: swarm-manager
            become: yes
            vars:
              wazuh_api_password: ${{ secrets.WAZUH_API_PASSWORD }}
              indexer_password: ${{ secrets.INDEXER_PASSWORD }}
              
            tasks:
              - name: Copy configuration files
                copy:
                  src: "{{ item.src }}"
                  dest: "{{ item.dest }}"
                  mode: '0644'
                loop:
                  - { src: "generate-indexer-certs.yml", dest: "/opt/wazuh/generate-indexer-certs.yml" }
                  - { src: "wazuh-swarm.yaml", dest: "/opt/wazuh/wazuh-swarm.yaml" }
                  - { src: "setup-secrets.sh", dest: "/opt/wazuh/setup-secrets.sh", mode: '0755' }

              - name: Copy config directory
                copy:
                  src: "config/"
                  dest: "/opt/wazuh/config/"
                  mode: '0644'

              - name: Generate certificates using your method
                shell: |
                  cd /opt/wazuh
                  docker compose -f generate-indexer-certs.yml run --rm generator

              - name: Create Docker secrets from certificates
                shell: |
                  cd /opt/wazuh
                  docker secret rm {{ item.name }} || true
                  docker secret create {{ item.name }} config/wazuh_indexer_ssl_certs/{{ item.file }}
                loop:
                  - { name: "root-ca-pem", file: "root-ca.pem" }
                  - { name: "root-ca-manager-pem", file: "root-ca-manager.pem" }
                  - { name: "admin-pem", file: "admin.pem" }
                  - { name: "admin-key", file: "admin-key.pem" }
                  - { name: "wazuh-indexer-pem", file: "wazuh.indexer.pem" }
                  - { name: "wazuh-indexer-key", file: "wazuh.indexer-key.pem" }
                  - { name: "wazuh-manager-pem", file: "wazuh.manager.pem" }
                  - { name: "wazuh-manager-key", file: "wazuh.manager-key.pem" }
                  - { name: "wazuh-dashboard-pem", file: "wazuh.dashboard.pem" }
                  - { name: "wazuh-dashboard-key", file: "wazuh.dashboard-key.pem" }

              - name: Create configuration secrets
                shell: |
                  cd /opt/wazuh
                  docker secret rm {{ item.name }} || true
                  docker secret create {{ item.name }} {{ item.file }}
                loop:
                  - { name: "wazuh-indexer-yml", file: "config/wazuh_indexer/wazuh.indexer.yml" }
                  - { name: "internal-users-yml", file: "config/wazuh_indexer/internal_users.yml" }
                  - { name: "opensearch-dashboards-yml", file: "config/wazuh_dashboard/opensearch_dashboards.yml" }
                  - { name: "wazuh-yml", file: "config/wazuh_dashboard/wazuh.yml" }
                  - { name: "wazuh-manager-conf", file: "config/wazuh_cluster/wazuh_manager.conf" }

              - name: Deploy Wazuh stack
                shell: |
                  cd /opt/wazuh
                  docker stack rm wazuh || true
                  sleep 15
                  docker stack deploy -c wazuh-swarm.yaml wazuh

              - name: Wait for services to be ready
                shell: docker service ls --filter name=wazuh
                register: service_status
                until: service_status.stdout_lines | length > 0
                retries: 30
                delay: 10

              - name: Verify deployment
                uri:
                  url: "https://{{ ansible_host }}:443"
                  method: GET
                  validate_certs: no
                  timeout: 30
                register: dashboard_check
                retries: 5
                delay: 10
          EOF
          
          ansible-playbook -i inventory.yml deploy-playbook.yml

  notify:
    runs-on: self-hosted
    needs: [deploy, security-scan]
    if: always()
    steps:
      - name: Notify deployment and security scan status
        run: |
          echo "=== Security Scan Status ==="
          if [ "${{ needs.security-scan.result }}" == "success" ]; then
            echo "✅ All security scans passed - no critical/high vulnerabilities found"
            echo "📊 Detailed reports available in GitHub Security tab"
          else
            echo "❌ Security scans failed - critical/high vulnerabilities detected"
            echo "🚫 Deployment was blocked for security reasons"
          fi
          
          echo ""
          echo "=== Deployment Status ==="
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Wazuh deployment successful"
          elif [ "${{ needs.deploy.result }}" == "skipped" ]; then
            echo "⏭️ Deployment skipped due to security scan failure"
          else
            echo "❌ Wazuh deployment failed"
          fi
          
          # Fail if either security scan or deployment failed
          if [ "${{ needs.security-scan.result }}" != "success" ] || [ "${{ needs.deploy.result }}" != "success" ]; then
            exit 1
          fi
